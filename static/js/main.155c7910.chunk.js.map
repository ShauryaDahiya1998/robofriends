{"version":3,"sources":["serviceWorker.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CardList","robots","Error","Searchbox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","style","overflowY","border","height","this","props","children","React","Component","ErrorBoundary","hasError","info","setState","App","onSearchChange","event","searchField","target","value","fetch","response","json","users","filterRobots","filter","robot","name","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.155c7910.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    if (true) {\n        throw new Error('Nooooooo!');\n    }\n    const cardArray = robots.map((user,i) => {\n        return (<Card key={i} id = {user.id} name = {user.name} email = {user.email}/>)\n    })\n    return (\n        <div>\n            {cardArray}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange = {searchChange}\n                />\n        </div>\n        \n    );\n}\n\nexport default Searchbox;","import React from 'react';\n\nclass Scroll extends React.Component {\n    render() {\n        return (\n            <div style={{overflowY:'scroll', border:'1px solid black', height:'500px'}}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        if (this.state.hasError) {\n            this.setState({ hasError:true });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (<h1>Oops, This has an error</h1>);\n        } \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '' \n        }\n    }\n\n    componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users').then(response => {\n            return response.json();\n        })\n        .then (users => {\n            this.setState({robots: users});\n        });\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n        \n    }\n    render() {\n        const filterRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        })\n        if(this.state.robots.length === 0) {\n            return (<h1>Loading</h1>);\n        } else  {\n            return(\n                <div className='tc'>\n                    <h1>Robofriends</h1>\n                    <Searchbox searchChange = {this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots = {filterRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n        \n    }\n    \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}